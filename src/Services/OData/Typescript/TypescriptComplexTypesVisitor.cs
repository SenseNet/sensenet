using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SenseNet.ContentRepository.Schema.Metadata;

namespace SenseNet.Portal.OData.Typescript
{
    internal class TypescriptComplexTypesVisitor : TypescriptModuleWriter
    {
        public TypescriptComplexTypesVisitor(TypescriptGenerationContext context, TextWriter writer) : base(context, writer) { }

        protected override IMetaNode VisitSchema(ContentRepository.Schema.Metadata.Schema schema)
        {
            // do not call the base functionality

            #region Write filestart
            _writer.WriteLine(@"/**
* Module containing complex data types like HyperLink or ChoiceOption.
*
* This module is autogenerated from Sense/Net ContentRepository.
*
* ```
* let link = new Fields.HyperlinkData({
*   Href: 'http://sensenet.com',
*   Text: 'Link to sensenet.com',
*   Title: 'Go to sensenet.com',
*   Target: '_blank'
* });
*
* let webContent = new ContentTypes.WebContentDemo({
*   Id: 1,
*   Name: 'MyContent',
*   DisplayName: 'My Content',
*   Type: 'WebContentDemo',
*   Details: link
* });
*
* ```
*/

export module " + TypescriptGenerationContext.ComplexTypesModuleName + @" {");
            #endregion

            _indentCount++;
            foreach (var complexType in Context.ComplexTypes)
                Visit(complexType);
            _indentCount--;

            #region Write fileend
            _writer.WriteLine(@"    export class ChoiceOption {
        Value: string;
        Text: string;
        Enabled: boolean;
        Selected: boolean;

        constructor(value: string, text?: string, enabled?: boolean, selected?: boolean) {
            this.Value = value;
            this.Text = text;
            this.Enabled = enabled;
            this.Selected = selected;
        }
    }

    export class DeferredUriObject {
        uri: string;
    }

    export class DeferredObject extends Object {
        __deferred: DeferredUriObject;
    }

    export class MediaObject {
        edit_media: string;
        media_src: string;
        content_type: string;
        media_etag: string;
    }

    export class MediaResourceObject extends Object {
        __mediaresource: MediaObject;
    }
}
");
            #endregion

            return schema;
        }
        protected override IMetaNode VisitComplexType(ComplexType complexType)
        {
            // do not call base functionality in this method

            if (SimplifiedProperties.ContainsKey(complexType.Name))
                return complexType;

            WriteLine($"export class {complexType.Name} {{");
            _indentCount++;

            // -------------

            var propertyLines = new List<string>();
            var ctorParams = new List<string>();
            var assignments = new List<string>();
            foreach (var property in complexType.Properties)
            {
                var propertyLowerName = property.Name.ToLowerInvariant();
                var typeName = GetPropertyTypeName(property.PropertyType);
                propertyLines.Add($"{property.Name}: {typeName}");
                ctorParams.Add($"{propertyLowerName}: {typeName}");
                assignments.Add($"this.{property.Name} = {propertyLowerName}");
            }

            foreach (var propertyLine in propertyLines)
                WriteLine(propertyLine + ";");

            WriteLine($"constructor({string.Join(", ", ctorParams)}) {{");
            _indentCount++;
            foreach (var assignment in assignments)
                WriteLine(assignment + ";");
            _indentCount--;
            WriteLine("}");

            // -------------

            _indentCount--;
            WriteLine("}");
            _writer.WriteLine();


            return complexType;
        }
    }
}
