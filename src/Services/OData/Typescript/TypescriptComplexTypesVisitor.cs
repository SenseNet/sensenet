using System.Collections.Generic;
using System.IO;
using SenseNet.ContentRepository.Schema.Metadata;

namespace SenseNet.Portal.OData.Typescript
{
    internal class TypescriptComplexTypesVisitor : TypescriptModuleWriter
    {
        public TypescriptComplexTypesVisitor(TypescriptGenerationContext context, TextWriter writer) : base(context, writer) { }

        protected override IMetaNode VisitSchema(ContentRepository.Schema.Metadata.Schema schema)
        {
            // do not call the base functionality

            #region Write filestart
            _writer.WriteLine(@"/**
 * @module ComplexTypes
 * @preferred
 *
 * @description Module containing complex data types like HyperLink or ChoiceOption.
 *
 * This module is autogenerated from Sense/Net ContentRepository.
 *
 * ```
 * let link = new Fields.HyperlinkData({
 *   Href: 'http://sensenet.com',
 *   Text: 'Link to sensenet.com',
 *   Title: 'Go to sensenet.com',
 *   Target: '_blank'
 * });
 *
 * let webContent = new ContentTypes.WebContentDemo({
 *   Id: 1,
 *   Name: 'MyContent',
 *   DisplayName: 'My Content',
 *   Type: 'WebContentDemo',
 *   Details: link
 * });
 *
 * ```
 */ /** */

// tslint:disable:naming-convention
");
            #endregion

            _indentCount++;
            foreach (var complexType in Context.ComplexTypes)
                Visit(complexType);
            _indentCount--;

            #region Write fileend
            _writer.WriteLine(@"export class ChoiceOption {
    public Value!: string;
    public Text?: string;
    public Enabled?: boolean;
    public Selected?: boolean;
}

export class DeferredUriObject {
    public uri!: string;
}

export class DeferredObject extends Object {
    public __deferred!: DeferredUriObject;
}

export class MediaObject {
    public edit_media!: string;
    public media_src!: string;
    public content_type!: string;
    public media_etag!: string;
}

export class MediaResourceObject extends Object {
   public __mediaresource!: MediaObject;
}");
            #endregion

            return schema;
        }
        protected override IMetaNode VisitComplexType(ComplexType complexType)
        {
            // do not call base functionality in this method

            if (SimplifiedProperties.ContainsKey(complexType.Name))
                return complexType;

            WriteLine($"export class {complexType.Name} {{");
            _indentCount++;

            // -------------

            var propertyLines = new List<string>();
            var ctorParams = new List<string>();
            foreach (var property in complexType.Properties)
            {
                var propertyLowerName = property.Name.ToLowerInvariant();
                var typeName = GetPropertyTypeName(property.PropertyType);
                propertyLines.Add($"public {property.Name}: {typeName}");
            }

            foreach (var propertyLine in propertyLines)
                WriteLine(propertyLine + ";");

            // -------------

            _indentCount--;
            WriteLine("}");
            _writer.WriteLine();


            return complexType;
        }
    }
}
